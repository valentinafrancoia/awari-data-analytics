<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/valentinafrançoia/OneDrive/Documentos/Data Analytics - Awari/olist_ecommerce ULTIMA VERSÃO.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1724"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,20:mainolist_orders_dataset"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="OfficeHours_1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="45"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Tabela1_OfficeHours" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="40"/><column index="2" value="55"/><column index="3" value="40"/><column index="4" value="73"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="exemplos" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="173"/><column index="2" value="43"/><column index="3" value="43"/><column index="4" value="240"/><column index="5" value="120"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="olist_customers_dataset" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="231"/><column index="2" value="231"/><column index="3" value="179"/><column index="4" value="153"/><column index="5" value="112"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="olist_geolocation_dataset" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="193"/><column index="2" value="121"/><column index="3" value="121"/><column index="4" value="115"/><column index="5" value="126"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="olist_order_items_dataset" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="231"/><column index="2" value="99"/><column index="3" value="231"/><column index="4" value="231"/><column index="5" value="133"/><column index="6" value="53"/><column index="7" value="95"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="olist_order_payments_dataset" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="4" mode="0"/></sort><column_widths><column index="1" value="231"/><column index="2" value="140"/><column index="3" value="103"/><column index="4" value="151"/><column index="5" value="108"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="olist_order_reviews_dataset" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="231"/><column index="2" value="231"/><column index="3" value="96"/><column index="4" value="159"/><column index="5" value="300"/><column index="6" value="152"/><column index="7" value="184"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="olist_orders_dataset" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="4" mode="0"/></sort><column_widths><column index="1" value="231"/><column index="2" value="231"/><column index="3" value="94"/><column index="4" value="188"/><column index="5" value="136"/><column index="6" value="202"/><column index="7" value="219"/><column index="8" value="215"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="olist_products_dataset" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="231"/><column index="2" value="297"/><column index="3" value="151"/><column index="4" value="188"/><column index="5" value="142"/><column index="6" value="127"/><column index="7" value="134"/><column index="8" value="134"/><column index="9" value="129"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="olist_sellers_dataset" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="231"/><column index="2" value="153"/><column index="3" value="240"/><column index="4" value="86"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="product_category_name_translation" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="297"/><column index="2" value="247"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- Live Class - Semana 03 (SQL INTERMEDIÁRIO) 20/05
 
-- DESAFIO 02 (CRIE UMA QUERY)

/* 1. Que retorne a quantidade de itens vendidos em cada categorias por estado em que o cliente se encontra, 
mostrando somente categorias que tenham vendido uma quantidade de itens acima de 1000 itens.*/


-- LEFT JOIN: Retorna a interseção e o “lado esquerdo”;
-- HAVING: usada apenas com o GROUP BY, pois não se pode filtrar registros que são agrupados com o WHERE

SELECT produtos.product_category_name as categoria,
	customer_state as estado,
	count (1) as quantidade
FROM olist_products_dataset as produtos
LEFT JOIN olist_order_items_dataset as itens on produtos.product_id = itens.product_id
LEFT JOIN olist_orders_dataset as pedidos on itens.order_id = pedidos.order_id
LEFT JOIN olist_customers_dataset as cust on pedidos.customer_id = cust.customer_id
GROUP by cust.customer_state
HAVING quantidade &gt; 1000
ORDER by 1 ASC, 2 ASC
	
	------ OR
	
SELECT c.customer_state as Estado,
		p.product_category_name as categoria,
		count (oi.order_id) as qtd
FROM olist_customers_dataset as c
JOIN olist_orders_dataset as o on o.customer_id = c.customer_id
JOIN olist_order_items_dataset as oi on o.order_id = oi.order_id
JOIN olist_products_dataset as p on p.product_id = oi.product_id
GROUP by 1,2
HAVING count (oi.order_id) &gt; 1000


/* 2. Mostre os 5 clientes (customer_id) que gastaram mais dinheiro em compras, 
qual foi o valor total de todas as compras deles,
 quantidade de compras, e valor médio gasto por compras, 
 ordene os mesmos por ordem decrescente pela media do valor de compra.*/
 
 
 SELECT
	cust.customer_id as id_cliente,
	count (*) as quantidade_compras,
	round (sum (pagamentos.payment_value),2) as valor_total,
	round (avg (pagamentos.payment_value),2) as média
	from olist_order_payments_dataset as pagamentos
LEFT JOIN olist_orders_dataset as ord  on pagamentos.order_id = ord.order_id
LEFT JOIN olist_customers_dataset as cust on cust.customer_id = ord.customer_id
WHERE cust.customer_id is not NULL
GROUP by cust.customer_id
ORDER by 3 DESC
limit 5


/* 3. Mostre o valor vendido total de cada vendedor(seller_id) em cada uma das categorias de produtos, 
somente retornando os vendedores que nesse somatório e agrupamento venderam mais de $1000, 
desejamos ver a categoria do produto e os vendedores,
 para cada uma dessas categorias mostre seus valores de venda de forma decrescente. */

SELECT 
	itens.seller_id as vendedor,
	prod.product_category_name as categoria,
	round (sum (itens.price),2) as valor_total
	FROM olist_order_items_dataset as itens
	LEFT join olist_products_dataset as prod  on itens.product_id = prod.product_id 
	group by itens.seller_id
	HAVING valor_total &gt; 1000
	ORDER by 2 DESC,3 DESC 
	
	
SELECT 
	itens.seller_id as vendedor,
	prod.product_category_name as categoria,
	round (sum (itens.price),2) as valor_total
FROM olist_products_dataset as prod
LEFT JOIN olist_order_items_dataset as itens on prod.product_id = itens.product_id 
GROUP by categoria
HAVING valor_total &gt;1000 
ORDER by 2 DESC, 3 DESC


	
	---------------------------------------


/* 1. Utilizando um comando SQL, retorne a nota de avaliação, o comentário da avaliação,
o status do pedido e a data de compra, apenas para os pedidos que tiveram avaliação.*/

--review_score - olist_order_reviews_dataset
-- review_comment_message - olist_order_reviews_dataset 
--order_status - olist_orders_dataset 
--order_purchase_timestamp - olist_orders_dataset

SELECT r.review_score as Pontuação,
		r.review_comment_message as Mensagem,
		o.order_status as Status,
		o.order_purchase_timestamp as Horário
FROM olist_order_reviews_dataset as r
JOIN olist_orders_dataset as o on o.order_id = r.order_id
WHERE r.review_comment_message is not NULL 



/* 2. Utilizando as tabelas produtos e a tabela de tradução do nome da categoria do produto,
 utilizando uma query e joins, identifique quais categorias de produto não tem uma tradução em inglês. */
 
 -- product_category_name 
 -- product_category_name_english
 -- olist_products_dataset
 -- product_category_name_translation
 
 SELECT pd.product_category_name as categoria_pt,
		cn.product_category_name_english as categoria_en
 FROM olist_products_dataset as pd
 left JOIN product_category_name_translation as cn on pd.product_category_name = cn.product_category_name
 WHERE pd.product_category_name &lt;&gt; cn.product_category_name_english
 GROUP by categoria_pt, categoria_en
 
 SELECT DISTINCT product_category_name
 FROM olist_products_dataset -- 74 categorias 
 
 SELECT DISTINCT product_category_name
 FROM product_category_name_translation -- 71 categorias 
  
 ----------------------------------------------------
 
-- 1. Qual o volume de pedidos por status, agrupados pelo ano do pedido de compra?

SELECT sum (quantidade_total)
 FROM
 (
SELECT order_status as status,
		count (*) as quantidade_total,
		substr (order_delivered_carrier_date, 1,4) as ano
from olist_orders_dataset
GROUP by  ano, status
)


/* 2. Qual o volume de pedidos por mês do ano? Faça uma limpeza para trazer os resultados pelo nome do mês por extenso 
e pelo valor numérico. Ex: Janeiro : 8069. */

SELECT order_purchase_timestamp as pedido,
		substr (order_purchase_timestamp, 6,2) as mês,
		count (*) as qtd,
		CASE
		when substr (order_purchase_timestamp, 6,2) = &quot;01&quot; then &quot;janeiro&quot;
		when substr (order_purchase_timestamp, 6,2) = &quot;02&quot; then &quot;fevereiro&quot;
		when substr (order_purchase_timestamp, 6,2) = &quot;03&quot; then &quot;março&quot;
		WHEN substr (order_purchase_timestamp, 6,2) = &quot;04&quot; then &quot;abril&quot;
		WHEN substr (order_purchase_timestamp, 6,2) = &quot;05&quot; then &quot;maio&quot;
		WHEN substr (order_purchase_timestamp, 6,2) = &quot;06&quot; then &quot;junho&quot;
		WHEN substr (order_purchase_timestamp, 6,2) = &quot;07&quot; then &quot;julho&quot;
		WHEN substr (order_purchase_timestamp, 6,2) = &quot;08&quot; then &quot;agosto&quot;
		WHEN substr (order_purchase_timestamp, 6,2) = &quot;09&quot; then &quot;setembro&quot;
		when substr (order_purchase_timestamp, 6,2) = &quot;10&quot; then &quot;outubro&quot;
		when substr (order_purchase_timestamp, 6,2) = &quot;11&quot; then &quot;novembro&quot;
		WHEN substr (order_purchase_timestamp, 6,2) = &quot;12&quot; then &quot;dezembro&quot;
		end as mês_extenso	
FROM olist_orders_dataset
GROUP by mês 

-- OU 

SELECT *,
CASE when mês = &quot;01&quot; then &quot;janeiro&quot; 
		when mês = &quot;02&quot; then &quot;fevereiro&quot;
		when mês = &quot;03&quot; then &quot;março&quot;
		WHEN mês = &quot;04&quot; then &quot;abril&quot;
		WHEN mês = &quot;05&quot; then &quot;maio&quot;
		WHEN mês = &quot;06&quot; then &quot;junho&quot;
		WHEN mês = &quot;07&quot; then &quot;julho&quot;
		WHEN mês = &quot;08&quot; then &quot;agosto&quot;
		WHEN mês = &quot;09&quot; then &quot;setembro&quot;
		when mês = &quot;10&quot; then &quot;outubro&quot;
		when mês = &quot;11&quot; then &quot;novembro&quot;
		WHEN mês = &quot;12&quot; then &quot;dezembro&quot;
end as mês_extenso 
FROM 
(
SELECT order_purchase_timestamp as pedido,
		substr (order_purchase_timestamp, 6,2) as mês,
		count (*) as qtd
FROM olist_orders_dataset
GROUP by mês 
)


/* 3. Retorne o volume de pedidos por mês e por status, em que os meses não sejam Janeiro, Julho e Outubro, 
ordenados pelo mês descendente.*/ 

SELECT sum (qtd) as soma_total 
FROM
(
SELECT order_purchase_timestamp as &quot;data/hora do pedido&quot;,
	order_status as status, 
	substr (order_purchase_timestamp, 6,2) as mês,
	count (*) as qtd
FROM olist_orders_dataset
WHERE substr (order_purchase_timestamp, 6,2) &lt;&gt; &quot;01&quot;
and substr (order_purchase_timestamp, 6,2) is NOT &quot;07&quot;
AND substr (order_purchase_timestamp, 6,2) is NOT &quot;10&quot;
Group by mês, status
ORDER by mês DESC, &quot;data/hora do pedido&quot; ASC
) 

SELECT order_purchase_timestamp, count (*)
FROM olist_orders_dataset
WHERE substr (order_purchase_timestamp, 6,2) &lt;&gt; &quot;01&quot;
and substr (order_purchase_timestamp, 6,2) is NOT &quot;07&quot;
AND substr (order_purchase_timestamp, 6,2) is NOT &quot;10&quot;

	
/* 4. Qual o volume de pedidos que foram entregues e que a data da entrega estava dentro do estimado? 
Agrupe por ano e por mês da compra; */


SELECT sum (qtd)
FROM
 (
SELECT  substr (order_purchase_timestamp, 1,4) as ano,
		substr (order_purchase_timestamp, 6,2) as mês,
		count (*)as qtd,
		CASE
		WHEN order_delivered_carrier_date &gt;= order_estimated_delivery_date then &quot;Atrasado&quot;
		WHEN order_delivered_carrier_date &lt;= order_estimated_delivery_date then &quot;Dentro do Prazo&quot;
		ELSE &quot;Desconhecido&quot;
		end as &quot;Prazo estimado&quot; 

FROM olist_orders_dataset 
GROUP by ano, mês, &quot;Prazo estimado&quot;
ORDER by ano, mês 
)

-- OU

SELECT entregue + não_entregue, 
		volume, 
		case when volume &lt;&gt; entregue + não_entregue then &quot;erro&quot; else &quot;Não erro&quot; end error
FROM 
(
SELECT sum (CASE when order_delivered_carrier_date is not null then 1 else 0 end ) as entregue,
		sum (CASE when order_delivered_carrier_date is null then 1 else 0 end) não_entregue,
		count (*) volume
from olist_orders_dataset
)
GROUP by 1


SELECT order_delivered_carrier_date,
count (*) qtd_total
from  olist_orders_dataset



/* 5. Encontre uma forma de retornar em uma única coluna, o mês por extenso e o ano da data de compra do pedido.
 Ex: Janeiro de 2018*/
 
 SELECT order_purchase_timestamp as tabela_original,
		CASE
		WHEN order_purchase_timestamp like &quot;%2017-10%&quot; then &quot;Outubro de 2017&quot;
		WHEN order_purchase_timestamp like &quot;%2017-11%&quot; then &quot;Novembro de 2017&quot;
		WHEN order_purchase_timestamp like &quot;%2017-12%&quot; then &quot;Dezembro de 2017&quot;
		WHEN order_purchase_timestamp like &quot;%2018-01%&quot; then &quot;Janeiro de 2018&quot;
		WHEN order_purchase_timestamp like &quot;%2018-02%&quot; then &quot;Fevereiro de 2018&quot;
		WHEN order_purchase_timestamp like &quot;%2018-03%&quot; then &quot;Março de 2018&quot;
		WHEN order_purchase_timestamp like &quot;%2018-04%&quot; then &quot;Abril de 2018&quot;
		WHEN order_purchase_timestamp like &quot;%2018-05%&quot; then &quot;Maio de 2018&quot;
		WHEN order_purchase_timestamp like &quot;%2018-06%&quot; then &quot;Junho de 2018&quot;
		WHEN order_purchase_timestamp like &quot;%2018-07%&quot; then &quot;Julho de 2018&quot;
		WHEN order_purchase_timestamp like &quot;%2018-08%&quot; then &quot;Agosto de 2018&quot;
		else order_purchase_timestamp
		end as tabela_tratada
 FROM olist_orders_dataset
 
</sql><current_tab id="0"/></tab_sql></sqlb_project>
